/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataLogResponse } from './DataLogResponse';
import {
    DataLogResponseFromJSON,
    DataLogResponseFromJSONTyped,
    DataLogResponseToJSON,
} from './DataLogResponse';

/**
 * 
 * @export
 * @interface CommandLogResponse
 */
export interface CommandLogResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CommandLogResponse
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CommandLogResponse
     */
    message?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommandLogResponse
     */
    readonly count?: number;
    /**
     * 
     * @type {Array<DataLogResponse>}
     * @memberof CommandLogResponse
     */
    commands?: Array<DataLogResponse> | null;
}

/**
 * Check if a given object implements the CommandLogResponse interface.
 */
export function instanceOfCommandLogResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommandLogResponseFromJSON(json: any): CommandLogResponse {
    return CommandLogResponseFromJSONTyped(json, false);
}

export function CommandLogResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommandLogResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'success': !exists(json, 'success') ? undefined : json['success'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'commands': !exists(json, 'commands') ? undefined : (json['commands'] === null ? null : (json['commands'] as Array<any>).map(DataLogResponseFromJSON)),
    };
}

export function CommandLogResponseToJSON(value?: CommandLogResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'success': value.success,
        'message': value.message,
        'commands': value.commands === undefined ? undefined : (value.commands === null ? null : (value.commands as Array<any>).map(DataLogResponseToJSON)),
    };
}

