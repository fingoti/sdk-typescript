/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegiserOrganisationDto
 */
export interface RegiserOrganisationDto {
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    organisationName: string;
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    organisationHandle: string;
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    addressLine1: string;
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    addressLine2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    county?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    postcode: string;
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    country?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegiserOrganisationDto
     */
    vatNumber?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof RegiserOrganisationDto
     */
    isBusiness?: boolean;
}

/**
 * Check if a given object implements the RegiserOrganisationDto interface.
 */
export function instanceOfRegiserOrganisationDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "organisationName" in value;
    isInstance = isInstance && "organisationHandle" in value;
    isInstance = isInstance && "addressLine1" in value;
    isInstance = isInstance && "postcode" in value;

    return isInstance;
}

export function RegiserOrganisationDtoFromJSON(json: any): RegiserOrganisationDto {
    return RegiserOrganisationDtoFromJSONTyped(json, false);
}

export function RegiserOrganisationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegiserOrganisationDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'organisationName': json['organisationName'],
        'organisationHandle': json['organisationHandle'],
        'addressLine1': json['addressLine1'],
        'addressLine2': !exists(json, 'addressLine2') ? undefined : json['addressLine2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'county': !exists(json, 'county') ? undefined : json['county'],
        'postcode': json['postcode'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'vatNumber': !exists(json, 'vatNumber') ? undefined : json['vatNumber'],
        'isBusiness': !exists(json, 'isBusiness') ? undefined : json['isBusiness'],
    };
}

export function RegiserOrganisationDtoToJSON(value?: RegiserOrganisationDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'organisationName': value.organisationName,
        'organisationHandle': value.organisationHandle,
        'addressLine1': value.addressLine1,
        'addressLine2': value.addressLine2,
        'city': value.city,
        'county': value.county,
        'postcode': value.postcode,
        'country': value.country,
        'vatNumber': value.vatNumber,
        'isBusiness': value.isBusiness,
    };
}

