/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WebhookAttempts } from './WebhookAttempts';
import {
    WebhookAttemptsFromJSON,
    WebhookAttemptsFromJSONTyped,
    WebhookAttemptsToJSON,
} from './WebhookAttempts';
import type { WebhookHeaders } from './WebhookHeaders';
import {
    WebhookHeadersFromJSON,
    WebhookHeadersFromJSONTyped,
    WebhookHeadersToJSON,
} from './WebhookHeaders';
import type { WebhookStatus } from './WebhookStatus';
import {
    WebhookStatusFromJSON,
    WebhookStatusFromJSONTyped,
    WebhookStatusToJSON,
} from './WebhookStatus';

/**
 * 
 * @export
 * @interface WebhookCallDto
 */
export interface WebhookCallDto {
    /**
     * 
     * @type {string}
     * @memberof WebhookCallDto
     */
    id?: string;
    /**
     * 
     * @type {WebhookStatus}
     * @memberof WebhookCallDto
     */
    status?: WebhookStatus;
    /**
     * 
     * @type {Date}
     * @memberof WebhookCallDto
     */
    timestamp?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof WebhookCallDto
     */
    requestUrl?: string | null;
    /**
     * 
     * @type {Array<WebhookHeaders>}
     * @memberof WebhookCallDto
     */
    requestHeaders?: Array<WebhookHeaders> | null;
    /**
     * 
     * @type {any}
     * @memberof WebhookCallDto
     */
    requestBody?: any | null;
    /**
     * 
     * @type {number}
     * @memberof WebhookCallDto
     */
    readonly count?: number;
    /**
     * 
     * @type {Array<WebhookAttempts>}
     * @memberof WebhookCallDto
     */
    attempts?: Array<WebhookAttempts> | null;
}

/**
 * Check if a given object implements the WebhookCallDto interface.
 */
export function instanceOfWebhookCallDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WebhookCallDtoFromJSON(json: any): WebhookCallDto {
    return WebhookCallDtoFromJSONTyped(json, false);
}

export function WebhookCallDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookCallDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'status': !exists(json, 'status') ? undefined : WebhookStatusFromJSON(json['status']),
        'timestamp': !exists(json, 'timestamp') ? undefined : (json['timestamp'] === null ? null : new Date(json['timestamp'])),
        'requestUrl': !exists(json, 'requestUrl') ? undefined : json['requestUrl'],
        'requestHeaders': !exists(json, 'requestHeaders') ? undefined : (json['requestHeaders'] === null ? null : (json['requestHeaders'] as Array<any>).map(WebhookHeadersFromJSON)),
        'requestBody': !exists(json, 'requestBody') ? undefined : json['requestBody'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'attempts': !exists(json, 'attempts') ? undefined : (json['attempts'] === null ? null : (json['attempts'] as Array<any>).map(WebhookAttemptsFromJSON)),
    };
}

export function WebhookCallDtoToJSON(value?: WebhookCallDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'status': WebhookStatusToJSON(value.status),
        'timestamp': value.timestamp === undefined ? undefined : (value.timestamp === null ? null : value.timestamp.toISOString()),
        'requestUrl': value.requestUrl,
        'requestHeaders': value.requestHeaders === undefined ? undefined : (value.requestHeaders === null ? null : (value.requestHeaders as Array<any>).map(WebhookHeadersToJSON)),
        'requestBody': value.requestBody,
        'attempts': value.attempts === undefined ? undefined : (value.attempts === null ? null : (value.attempts as Array<any>).map(WebhookAttemptsToJSON)),
    };
}

