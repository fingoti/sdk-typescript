/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddFollowDto,
  Default,
  DefaultWithId,
  OrganisationFollowingResponse,
  PatchFollowRequest,
} from '../models';
import {
    AddFollowDtoFromJSON,
    AddFollowDtoToJSON,
    DefaultFromJSON,
    DefaultToJSON,
    DefaultWithIdFromJSON,
    DefaultWithIdToJSON,
    OrganisationFollowingResponseFromJSON,
    OrganisationFollowingResponseToJSON,
    PatchFollowRequestFromJSON,
    PatchFollowRequestToJSON,
} from '../models';

export interface DeleteFollowingsIdRequest {
    id: string;
}

export interface GetFollowingsRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    followName?: string;
    source?: string;
    destination?: string;
}

export interface GetFollowingsIdRequest {
    id: string;
}

export interface PatchFollowingsIdRequest {
    id: string;
    patchFollowRequest?: PatchFollowRequest;
}

export interface PostFollowingsRequest {
    addFollowDto?: AddFollowDto;
}

/**
 * 
 */
export class FollowingsApi extends runtime.BaseAPI {

    /**
     * Delete a Pin Following. This is not recoverable.
     */
    private async deleteFollowingsIdRaw(requestParameters: DeleteFollowingsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFollowingsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/followings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Delete a Pin Following. This is not recoverable.
     */
    async deleteFollowingsId(requestParameters: DeleteFollowingsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.deleteFollowingsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all pin followings.
     */
    private async getFollowingsRaw(requestParameters: GetFollowingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationFollowingResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.followName !== undefined) {
            queryParameters['followName'] = requestParameters.followName;
        }

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        if (requestParameters.destination !== undefined) {
            queryParameters['destination'] = requestParameters.destination;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/followings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFollowingResponseFromJSON(jsonValue));
    }

    /**
     * Get all pin followings.
     */
    async getFollowings(requestParameters: GetFollowingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationFollowingResponse> {
        const response = await this.getFollowingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specified pin following.
     */
    private async getFollowingsIdRaw(requestParameters: GetFollowingsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationFollowingResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFollowingsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/followings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFollowingResponseFromJSON(jsonValue));
    }

    /**
     * Get specified pin following.
     */
    async getFollowingsId(requestParameters: GetFollowingsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationFollowingResponse> {
        const response = await this.getFollowingsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted
     * Update pin following.
     */
    private async patchFollowingsIdRaw(requestParameters: PatchFollowingsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchFollowingsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/followings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchFollowRequestToJSON(requestParameters.patchFollowRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted
     * Update pin following.
     */
    async patchFollowingsId(requestParameters: PatchFollowingsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchFollowingsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new pin following.
     */
    private async postFollowingsRaw(requestParameters: PostFollowingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultWithId>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/followings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFollowDtoToJSON(requestParameters.addFollowDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultWithIdFromJSON(jsonValue));
    }

    /**
     * Create a new pin following.
     */
    async postFollowings(requestParameters: PostFollowingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultWithId> {
        const response = await this.postFollowingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
