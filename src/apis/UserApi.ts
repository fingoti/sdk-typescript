/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Default,
  DefaultWithToken,
  GetProfileResponse,
  NewUserTokenDto,
  PatchUserRequest,
  PatchUserTokenRequest,
  PortalUserOrganisationsDto,
  RegisterUserDto,
  TokenSuccessResponse,
  UserSessionsResponse,
  UserTokenResponse,
} from '../models';
import {
    DefaultFromJSON,
    DefaultToJSON,
    DefaultWithTokenFromJSON,
    DefaultWithTokenToJSON,
    GetProfileResponseFromJSON,
    GetProfileResponseToJSON,
    NewUserTokenDtoFromJSON,
    NewUserTokenDtoToJSON,
    PatchUserRequestFromJSON,
    PatchUserRequestToJSON,
    PatchUserTokenRequestFromJSON,
    PatchUserTokenRequestToJSON,
    PortalUserOrganisationsDtoFromJSON,
    PortalUserOrganisationsDtoToJSON,
    RegisterUserDtoFromJSON,
    RegisterUserDtoToJSON,
    TokenSuccessResponseFromJSON,
    TokenSuccessResponseToJSON,
    UserSessionsResponseFromJSON,
    UserSessionsResponseToJSON,
    UserTokenResponseFromJSON,
    UserTokenResponseToJSON,
} from '../models';

export interface DeleteUserTokensIdRequest {
    id: string;
}

export interface GetUserOrganisationsRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    organisationName?: string;
}

export interface GetUserSessionsRequest {
    pageNumber?: number;
    itemsPerPage?: number;
}

export interface GetUserTokensRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    tokenName?: string;
}

export interface GetUserTokensIdRequest {
    id: string;
}

export interface PatchUserOperationRequest {
    patchUserRequest?: PatchUserRequest;
}

export interface PatchUserTokensIdRequest {
    id: string;
    patchUserTokenRequest?: PatchUserTokenRequest;
}

export interface PostUserRequest {
    registerUserDto?: RegisterUserDto;
}

export interface PostUserTokensRequest {
    newUserTokenDto?: NewUserTokenDto;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
     */
    private async deleteUserTokensIdRaw(requestParameters: DeleteUserTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserTokensId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user/tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
     */
    async deleteUserTokensId(requestParameters: DeleteUserTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.deleteUserTokensIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get your Fingoti user.
     */
    private async getUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileResponseFromJSON(jsonValue));
    }

    /**
     * Get your Fingoti user.
     */
    async getUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileResponse> {
        const response = await this.getUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all organisations you are a member of.
     */
    private async getUserOrganisationsRaw(requestParameters: GetUserOrganisationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortalUserOrganisationsDto>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.organisationName !== undefined) {
            queryParameters['organisationName'] = requestParameters.organisationName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user/organisations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortalUserOrganisationsDtoFromJSON(jsonValue));
    }

    /**
     * Get all organisations you are a member of.
     */
    async getUserOrganisations(requestParameters: GetUserOrganisationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortalUserOrganisationsDto> {
        const response = await this.getUserOrganisationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all user sessions.
     */
    private async getUserSessionsRaw(requestParameters: GetUserSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSessionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSessionsResponseFromJSON(jsonValue));
    }

    /**
     * Get all user sessions.
     */
    async getUserSessions(requestParameters: GetUserSessionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSessionsResponse> {
        const response = await this.getUserSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all API tokens.
     */
    private async getUserTokensRaw(requestParameters: GetUserTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserTokenResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.tokenName !== undefined) {
            queryParameters['tokenName'] = requestParameters.tokenName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserTokenResponseFromJSON(jsonValue));
    }

    /**
     * Get all API tokens.
     */
    async getUserTokens(requestParameters: GetUserTokensRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserTokenResponse> {
        const response = await this.getUserTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specified token.
     */
    private async getUserTokensIdRaw(requestParameters: GetUserTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserTokenResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserTokensId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user/tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserTokenResponseFromJSON(jsonValue));
    }

    /**
     * Get specified token.
     */
    async getUserTokensId(requestParameters: GetUserTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserTokenResponse> {
        const response = await this.getUserTokensIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted
     * Update Fingoti user.
     */
    private async patchUserRaw(requestParameters: PatchUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserRequestToJSON(requestParameters.patchUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted
     * Update Fingoti user.
     */
    async patchUser(requestParameters: PatchUserOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted
     * Update API token.
     */
    private async patchUserTokensIdRaw(requestParameters: PatchUserTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchUserTokensId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user/tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserTokenRequestToJSON(requestParameters.patchUserTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted
     * Update API token.
     */
    async patchUserTokensId(requestParameters: PatchUserTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchUserTokensIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The returned token is a Register token and is used to register a new Organisation
     * Register a new Fingoti user.
     */
    private async postUserRaw(requestParameters: PostUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultWithToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserDtoToJSON(requestParameters.registerUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultWithTokenFromJSON(jsonValue));
    }

    /**
     * The returned token is a Register token and is used to register a new Organisation
     * Register a new Fingoti user.
     */
    async postUser(requestParameters: PostUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultWithToken> {
        const response = await this.postUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate new API token.
     */
    private async postUserTokensRaw(requestParameters: PostUserTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenSuccessResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/user/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUserTokenDtoToJSON(requestParameters.newUserTokenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Generate new API token.
     */
    async postUserTokens(requestParameters: PostUserTokensRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenSuccessResponse> {
        const response = await this.postUserTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
