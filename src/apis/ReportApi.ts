/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommandDirection,
  CommandLogResponse,
  UsageTrackingResponse,
} from '../models';
import {
    CommandDirectionFromJSON,
    CommandDirectionToJSON,
    CommandLogResponseFromJSON,
    CommandLogResponseToJSON,
    UsageTrackingResponseFromJSON,
    UsageTrackingResponseToJSON,
} from '../models';

export interface GetReportIdCommandsRequest {
    id: string;
    start?: string;
    end?: string;
    direction?: CommandDirection;
}

export interface GetReportUsageRequest {
    start?: string;
    end?: string;
}

/**
 * 
 */
export class ReportApi extends runtime.BaseAPI {

    /**
     * Retrieve command log
     */
    private async getReportIdCommandsRaw(requestParameters: GetReportIdCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommandLogResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReportIdCommands.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/report/{id}/commands`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommandLogResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve command log
     */
    async getReportIdCommands(requestParameters: GetReportIdCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommandLogResponse> {
        const response = await this.getReportIdCommandsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve property usage statistics per day per device
     */
    private async getReportUsageRaw(requestParameters: GetReportUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsageTrackingResponse>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/report/usage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageTrackingResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve property usage statistics per day per device
     */
    async getReportUsage(requestParameters: GetReportUsageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsageTrackingResponse> {
        const response = await this.getReportUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
