/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddWebhookDto,
  AddWebhookResult,
  Default,
  EngineWebhookResponse,
  EngineWebhooksResponse,
  PatchWebhookRequest,
  WebhookLogsResponse,
  WebhookRetryRequest,
} from '../models';
import {
    AddWebhookDtoFromJSON,
    AddWebhookDtoToJSON,
    AddWebhookResultFromJSON,
    AddWebhookResultToJSON,
    DefaultFromJSON,
    DefaultToJSON,
    EngineWebhookResponseFromJSON,
    EngineWebhookResponseToJSON,
    EngineWebhooksResponseFromJSON,
    EngineWebhooksResponseToJSON,
    PatchWebhookRequestFromJSON,
    PatchWebhookRequestToJSON,
    WebhookLogsResponseFromJSON,
    WebhookLogsResponseToJSON,
    WebhookRetryRequestFromJSON,
    WebhookRetryRequestToJSON,
} from '../models';

export interface DeleteWebhookIdRequest {
    id: string;
}

export interface GetWebhookRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    webhookNumber?: string;
    property?: string;
}

export interface GetWebhookIdRequest {
    id: string;
    pageNumber?: number;
    itemsPerPage?: number;
    status?: Array<number>;
}

export interface GetWebhookLogsRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    status?: Array<number>;
    webhookNumber?: string;
}

export interface PatchWebhookIdRequest {
    id: string;
    patchWebhookRequest?: PatchWebhookRequest;
}

export interface PostWebhookRequest {
    addWebhookDto?: AddWebhookDto;
}

export interface PostWebhookRetryRequest {
    webhookRetryRequest?: WebhookRetryRequest;
}

/**
 * 
 */
export class WebhookApi extends runtime.BaseAPI {

    /**
     * Delete a Webhook. This is not recoverable.
     */
    private async deleteWebhookIdRaw(requestParameters: DeleteWebhookIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWebhookId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/webhook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Delete a Webhook. This is not recoverable.
     */
    async deleteWebhookId(requestParameters: DeleteWebhookIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.deleteWebhookIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all registered webhooks.
     */
    private async getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EngineWebhooksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.webhookNumber !== undefined) {
            queryParameters['webhookNumber'] = requestParameters.webhookNumber;
        }

        if (requestParameters.property !== undefined) {
            queryParameters['property'] = requestParameters.property;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/webhook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EngineWebhooksResponseFromJSON(jsonValue));
    }

    /**
     * Get all registered webhooks.
     */
    async getWebhook(requestParameters: GetWebhookRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EngineWebhooksResponse> {
        const response = await this.getWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specified webhook.
     */
    private async getWebhookIdRaw(requestParameters: GetWebhookIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EngineWebhookResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWebhookId.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/webhook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EngineWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Get specified webhook.
     */
    async getWebhookId(requestParameters: GetWebhookIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EngineWebhookResponse> {
        const response = await this.getWebhookIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all registered webhooks with call logs.
     */
    private async getWebhookLogsRaw(requestParameters: GetWebhookLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookLogsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.webhookNumber !== undefined) {
            queryParameters['webhookNumber'] = requestParameters.webhookNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/webhook/logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookLogsResponseFromJSON(jsonValue));
    }

    /**
     * Get all registered webhooks with call logs.
     */
    async getWebhookLogs(requestParameters: GetWebhookLogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookLogsResponse> {
        const response = await this.getWebhookLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted
     * Update Fingoti webhook.
     */
    private async patchWebhookIdRaw(requestParameters: PatchWebhookIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchWebhookId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/webhook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchWebhookRequestToJSON(requestParameters.patchWebhookRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted
     * Update Fingoti webhook.
     */
    async patchWebhookId(requestParameters: PatchWebhookIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchWebhookIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new webhook.
     */
    private async postWebhookRaw(requestParameters: PostWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddWebhookResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddWebhookDtoToJSON(requestParameters.addWebhookDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddWebhookResultFromJSON(jsonValue));
    }

    /**
     * Register a new webhook.
     */
    async postWebhook(requestParameters: PostWebhookRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddWebhookResult> {
        const response = await this.postWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retry a webhook.
     */
    private async postWebhookRetryRaw(requestParameters: PostWebhookRetryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/webhook/retry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookRetryRequestToJSON(requestParameters.webhookRetryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Retry a webhook.
     */
    async postWebhookRetry(requestParameters: PostWebhookRetryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.postWebhookRetryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
