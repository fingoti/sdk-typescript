/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimRequest,
  ClaimResult,
  ClaimedDeviceResponse,
  ClaimedDevicesDto,
  Default,
  DeviceNodesResponse,
  DeviceRequest,
  MqttDeviceResponse,
  PatchGateway,
  UpdateRequest,
  UpdateResponse,
} from '../models';
import {
    ClaimRequestFromJSON,
    ClaimRequestToJSON,
    ClaimResultFromJSON,
    ClaimResultToJSON,
    ClaimedDeviceResponseFromJSON,
    ClaimedDeviceResponseToJSON,
    ClaimedDevicesDtoFromJSON,
    ClaimedDevicesDtoToJSON,
    DefaultFromJSON,
    DefaultToJSON,
    DeviceNodesResponseFromJSON,
    DeviceNodesResponseToJSON,
    DeviceRequestFromJSON,
    DeviceRequestToJSON,
    MqttDeviceResponseFromJSON,
    MqttDeviceResponseToJSON,
    PatchGatewayFromJSON,
    PatchGatewayToJSON,
    UpdateRequestFromJSON,
    UpdateRequestToJSON,
    UpdateResponseFromJSON,
    UpdateResponseToJSON,
} from '../models';

export interface DeleteDeviceIdRequest {
    id: string;
}

export interface GetDeviceRequest {
    lastUpdated?: Date;
}

export interface GetDeviceIdRequest {
    id: string;
}

export interface GetDeviceIdNodesRequest {
    id: string;
}

export interface PatchDeviceIdRequest {
    id: string;
    patchGateway?: PatchGateway;
}

export interface PostDeviceRequest {
    claimRequest?: ClaimRequest;
}

export interface PostDeviceSendrequestRequest {
    deviceRequest?: DeviceRequest;
}

export interface PostDeviceUpdateRequest {
    updateRequest?: UpdateRequest;
}

/**
 * 
 */
export class DeviceApi extends runtime.BaseAPI {

    /**
     * Unclaim a Fingoti device.
     */
    private async deleteDeviceIdRaw(requestParameters: DeleteDeviceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDeviceId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/device/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateResponseFromJSON(jsonValue));
    }

    /**
     * Unclaim a Fingoti device.
     */
    async deleteDeviceId(requestParameters: DeleteDeviceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateResponse> {
        const response = await this.deleteDeviceIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all devices.
     */
    private async getDeviceRaw(requestParameters: GetDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimedDevicesDto>> {
        const queryParameters: any = {};

        if (requestParameters.lastUpdated !== undefined) {
            queryParameters['LastUpdated'] = (requestParameters.lastUpdated as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/device`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimedDevicesDtoFromJSON(jsonValue));
    }

    /**
     * Get all devices.
     */
    async getDevice(requestParameters: GetDeviceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimedDevicesDto> {
        const response = await this.getDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specified device.
     */
    private async getDeviceIdRaw(requestParameters: GetDeviceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimedDeviceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeviceId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/device/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimedDeviceResponseFromJSON(jsonValue));
    }

    /**
     * Get specified device.
     */
    async getDeviceId(requestParameters: GetDeviceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimedDeviceResponse> {
        const response = await this.getDeviceIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all nodes latched to a gateway.
     */
    private async getDeviceIdNodesRaw(requestParameters: GetDeviceIdNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceNodesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeviceIdNodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/device/{id}/nodes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceNodesResponseFromJSON(jsonValue));
    }

    /**
     * Get all nodes latched to a gateway.
     */
    async getDeviceIdNodes(requestParameters: GetDeviceIdNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceNodesResponse> {
        const response = await this.getDeviceIdNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update your Fingoti device.
     */
    private async patchDeviceIdRaw(requestParameters: PatchDeviceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchDeviceId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/device/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchGatewayToJSON(requestParameters.patchGateway),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Update your Fingoti device.
     */
    async patchDeviceId(requestParameters: PatchDeviceIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchDeviceIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Claim a new Fingoti device.
     */
    private async postDeviceRaw(requestParameters: PostDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/device`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimRequestToJSON(requestParameters.claimRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimResultFromJSON(jsonValue));
    }

    /**
     * Claim a new Fingoti device.
     */
    async postDevice(requestParameters: PostDeviceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimResult> {
        const response = await this.postDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The payload object varies depending on the property used, please refer to our protocol documentation <a href=\"https://help.fingoti.com\">here</a> for more infomation. <br />   Multiple objects can be sent in the request array and will be executed in order.
     * Send a request to a Fingoti device.
     */
    private async postDeviceSendrequestRaw(requestParameters: PostDeviceSendrequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MqttDeviceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/device/sendrequest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceRequestToJSON(requestParameters.deviceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MqttDeviceResponseFromJSON(jsonValue));
    }

    /**
     * The payload object varies depending on the property used, please refer to our protocol documentation <a href=\"https://help.fingoti.com\">here</a> for more infomation. <br />   Multiple objects can be sent in the request array and will be executed in order.
     * Send a request to a Fingoti device.
     */
    async postDeviceSendrequest(requestParameters: PostDeviceSendrequestRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MqttDeviceResponse> {
        const response = await this.postDeviceSendrequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a device update.
     */
    private async postDeviceUpdateRaw(requestParameters: PostDeviceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MqttDeviceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/device/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRequestToJSON(requestParameters.updateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MqttDeviceResponseFromJSON(jsonValue));
    }

    /**
     * Initiate a device update.
     */
    async postDeviceUpdate(requestParameters: PostDeviceUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MqttDeviceResponse> {
        const response = await this.postDeviceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
