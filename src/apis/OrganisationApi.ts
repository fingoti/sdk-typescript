/* tslint:disable */
/* eslint-disable */
/**
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAddressRequest,
  AddPresetRequest,
  AddPresetResult,
  AddRoleRequest,
  Default,
  DefaultWithId,
  InviteUserDto,
  NewOrganisationTokenDto,
  OrganisationAddressResponse,
  OrganisationPartnerResponse,
  OrganisationPresetResponse,
  OrganisationResponse,
  OrganisationRoleResponse,
  OrganisationTenantsResponse,
  OrganisationUserResponse,
  PatchAddressRequest,
  PatchOrganisationRequest,
  PatchOrganisationTokenRequest,
  PatchPresetRequest,
  PatchRoleRequest,
  RegiserOrganisationDto,
  RegiserTenantDto,
  RegisterOrganisationResult,
  TokenSuccessResponse,
  UpdateUserRole,
  UserTokenResponse,
} from '../models';
import {
    AddAddressRequestFromJSON,
    AddAddressRequestToJSON,
    AddPresetRequestFromJSON,
    AddPresetRequestToJSON,
    AddPresetResultFromJSON,
    AddPresetResultToJSON,
    AddRoleRequestFromJSON,
    AddRoleRequestToJSON,
    DefaultFromJSON,
    DefaultToJSON,
    DefaultWithIdFromJSON,
    DefaultWithIdToJSON,
    InviteUserDtoFromJSON,
    InviteUserDtoToJSON,
    NewOrganisationTokenDtoFromJSON,
    NewOrganisationTokenDtoToJSON,
    OrganisationAddressResponseFromJSON,
    OrganisationAddressResponseToJSON,
    OrganisationPartnerResponseFromJSON,
    OrganisationPartnerResponseToJSON,
    OrganisationPresetResponseFromJSON,
    OrganisationPresetResponseToJSON,
    OrganisationResponseFromJSON,
    OrganisationResponseToJSON,
    OrganisationRoleResponseFromJSON,
    OrganisationRoleResponseToJSON,
    OrganisationTenantsResponseFromJSON,
    OrganisationTenantsResponseToJSON,
    OrganisationUserResponseFromJSON,
    OrganisationUserResponseToJSON,
    PatchAddressRequestFromJSON,
    PatchAddressRequestToJSON,
    PatchOrganisationRequestFromJSON,
    PatchOrganisationRequestToJSON,
    PatchOrganisationTokenRequestFromJSON,
    PatchOrganisationTokenRequestToJSON,
    PatchPresetRequestFromJSON,
    PatchPresetRequestToJSON,
    PatchRoleRequestFromJSON,
    PatchRoleRequestToJSON,
    RegiserOrganisationDtoFromJSON,
    RegiserOrganisationDtoToJSON,
    RegiserTenantDtoFromJSON,
    RegiserTenantDtoToJSON,
    RegisterOrganisationResultFromJSON,
    RegisterOrganisationResultToJSON,
    TokenSuccessResponseFromJSON,
    TokenSuccessResponseToJSON,
    UpdateUserRoleFromJSON,
    UpdateUserRoleToJSON,
    UserTokenResponseFromJSON,
    UserTokenResponseToJSON,
} from '../models';

export interface DeleteOrganisationAddressesIdRequest {
    id: string;
}

export interface DeleteOrganisationPresetsIdRequest {
    id: string;
}

export interface DeleteOrganisationRolesIdRequest {
    id: string;
}

export interface DeleteOrganisationTokensIdRequest {
    id: string;
}

export interface DeleteOrganisationUsersIdRequest {
    id: string;
}

export interface GetOrganisationAddressesRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    address?: string;
    postcode?: string;
}

export interface GetOrganisationAddressesIdRequest {
    id: string;
}

export interface GetOrganisationPresetsRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    presetNumber?: string;
    presetName?: string;
}

export interface GetOrganisationPresetsIdRequest {
    id: string;
}

export interface GetOrganisationRolesRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    roleName?: string;
}

export interface GetOrganisationRolesIdRequest {
    id: string;
}

export interface GetOrganisationTenantsRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    organisationNumber?: string;
    organisationName?: string;
}

export interface GetOrganisationTokensRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    tokenName?: string;
}

export interface GetOrganisationTokensIdRequest {
    id: string;
}

export interface GetOrganisationUsersRequest {
    pageNumber?: number;
    itemsPerPage?: number;
    name?: string;
    email?: string;
}

export interface GetOrganisationUsersIdRequest {
    id: string;
}

export interface PatchOrganisationOperationRequest {
    patchOrganisationRequest?: PatchOrganisationRequest;
}

export interface PatchOrganisationAddressesIdRequest {
    id: string;
    patchAddressRequest?: PatchAddressRequest;
}

export interface PatchOrganisationPresetsIdRequest {
    id: string;
    patchPresetRequest?: PatchPresetRequest;
}

export interface PatchOrganisationRolesIdRequest {
    id: string;
    patchRoleRequest?: PatchRoleRequest;
}

export interface PatchOrganisationTokensIdRequest {
    id: string;
    patchOrganisationTokenRequest?: PatchOrganisationTokenRequest;
}

export interface PatchOrganisationUsersIdRequest {
    id: string;
    updateUserRole?: UpdateUserRole;
}

export interface PostOrganisationRequest {
    regiserOrganisationDto?: RegiserOrganisationDto;
}

export interface PostOrganisationAddressesRequest {
    addAddressRequest?: AddAddressRequest;
}

export interface PostOrganisationPresetsRequest {
    addPresetRequest?: AddPresetRequest;
}

export interface PostOrganisationRolesRequest {
    addRoleRequest?: AddRoleRequest;
}

export interface PostOrganisationTenantsRequest {
    regiserTenantDto?: RegiserTenantDto;
}

export interface PostOrganisationTokensRequest {
    newOrganisationTokenDto?: NewOrganisationTokenDto;
}

export interface PostOrganisationUsersRequest {
    inviteUserDto?: InviteUserDto;
}

/**
 * 
 */
export class OrganisationApi extends runtime.BaseAPI {

    /**
     * Delete an address. This is not recoverable.
     */
    private async deleteOrganisationAddressesIdRaw(requestParameters: DeleteOrganisationAddressesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganisationAddressesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Delete an address. This is not recoverable.
     */
    async deleteOrganisationAddressesId(requestParameters: DeleteOrganisationAddressesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.deleteOrganisationAddressesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specified preset.
     */
    private async deleteOrganisationPresetsIdRaw(requestParameters: DeleteOrganisationPresetsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganisationPresetsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/presets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Delete specified preset.
     */
    async deleteOrganisationPresetsId(requestParameters: DeleteOrganisationPresetsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.deleteOrganisationPresetsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a role. Role must not be assigned to any users. This is not recoverable.
     */
    private async deleteOrganisationRolesIdRaw(requestParameters: DeleteOrganisationRolesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganisationRolesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Delete a role. Role must not be assigned to any users. This is not recoverable.
     */
    async deleteOrganisationRolesId(requestParameters: DeleteOrganisationRolesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.deleteOrganisationRolesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
     */
    private async deleteOrganisationTokensIdRaw(requestParameters: DeleteOrganisationTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganisationTokensId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
     */
    async deleteOrganisationTokensId(requestParameters: DeleteOrganisationTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.deleteOrganisationTokensIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from the organisation.
     */
    private async deleteOrganisationUsersIdRaw(requestParameters: DeleteOrganisationUsersIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganisationUsersId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Remove a user from the organisation.
     */
    async deleteOrganisationUsersId(requestParameters: DeleteOrganisationUsersIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.deleteOrganisationUsersIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get your Fingoti organisaiton information.
     */
    private async getOrganisationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseFromJSON(jsonValue));
    }

    /**
     * Get your Fingoti organisaiton information.
     */
    async getOrganisation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse> {
        const response = await this.getOrganisationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all addresses.
     */
    private async getOrganisationAddressesRaw(requestParameters: GetOrganisationAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationAddressResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.postcode !== undefined) {
            queryParameters['postcode'] = requestParameters.postcode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationAddressResponseFromJSON(jsonValue));
    }

    /**
     * Get all addresses.
     */
    async getOrganisationAddresses(requestParameters: GetOrganisationAddressesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationAddressResponse> {
        const response = await this.getOrganisationAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specified address.
     */
    private async getOrganisationAddressesIdRaw(requestParameters: GetOrganisationAddressesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationAddressResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganisationAddressesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationAddressResponseFromJSON(jsonValue));
    }

    /**
     * Get specified address.
     */
    async getOrganisationAddressesId(requestParameters: GetOrganisationAddressesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationAddressResponse> {
        const response = await this.getOrganisationAddressesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get partner information.
     */
    private async getOrganisationPartnerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationPartnerResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/partner`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationPartnerResponseFromJSON(jsonValue));
    }

    /**
     * Get partner information.
     */
    async getOrganisationPartner(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationPartnerResponse> {
        const response = await this.getOrganisationPartnerRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all presets.
     */
    private async getOrganisationPresetsRaw(requestParameters: GetOrganisationPresetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationPresetResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.presetNumber !== undefined) {
            queryParameters['presetNumber'] = requestParameters.presetNumber;
        }

        if (requestParameters.presetName !== undefined) {
            queryParameters['presetName'] = requestParameters.presetName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/presets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationPresetResponseFromJSON(jsonValue));
    }

    /**
     * Get all presets.
     */
    async getOrganisationPresets(requestParameters: GetOrganisationPresetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationPresetResponse> {
        const response = await this.getOrganisationPresetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specified preset.
     */
    private async getOrganisationPresetsIdRaw(requestParameters: GetOrganisationPresetsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationPresetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganisationPresetsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/presets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationPresetResponseFromJSON(jsonValue));
    }

    /**
     * Get specified preset.
     */
    async getOrganisationPresetsId(requestParameters: GetOrganisationPresetsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationPresetResponse> {
        const response = await this.getOrganisationPresetsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 0 = None, 1 = Read, 2 = Write
     * Get all roles.
     */
    private async getOrganisationRolesRaw(requestParameters: GetOrganisationRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationRoleResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.roleName !== undefined) {
            queryParameters['roleName'] = requestParameters.roleName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationRoleResponseFromJSON(jsonValue));
    }

    /**
     * 0 = None, 1 = Read, 2 = Write
     * Get all roles.
     */
    async getOrganisationRoles(requestParameters: GetOrganisationRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationRoleResponse> {
        const response = await this.getOrganisationRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 0 = None, 1 = Read, 2 = Write
     * Get specified role.
     */
    private async getOrganisationRolesIdRaw(requestParameters: GetOrganisationRolesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationRoleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganisationRolesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationRoleResponseFromJSON(jsonValue));
    }

    /**
     * 0 = None, 1 = Read, 2 = Write
     * Get specified role.
     */
    async getOrganisationRolesId(requestParameters: GetOrganisationRolesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationRoleResponse> {
        const response = await this.getOrganisationRolesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tenants.
     */
    private async getOrganisationTenantsRaw(requestParameters: GetOrganisationTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationTenantsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.organisationNumber !== undefined) {
            queryParameters['organisationNumber'] = requestParameters.organisationNumber;
        }

        if (requestParameters.organisationName !== undefined) {
            queryParameters['organisationName'] = requestParameters.organisationName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationTenantsResponseFromJSON(jsonValue));
    }

    /**
     * Get all tenants.
     */
    async getOrganisationTenants(requestParameters: GetOrganisationTenantsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationTenantsResponse> {
        const response = await this.getOrganisationTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all API tokens.
     */
    private async getOrganisationTokensRaw(requestParameters: GetOrganisationTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserTokenResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.tokenName !== undefined) {
            queryParameters['tokenName'] = requestParameters.tokenName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserTokenResponseFromJSON(jsonValue));
    }

    /**
     * Get all API tokens.
     */
    async getOrganisationTokens(requestParameters: GetOrganisationTokensRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserTokenResponse> {
        const response = await this.getOrganisationTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specified token.
     */
    private async getOrganisationTokensIdRaw(requestParameters: GetOrganisationTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserTokenResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganisationTokensId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserTokenResponseFromJSON(jsonValue));
    }

    /**
     * Get specified token.
     */
    async getOrganisationTokensId(requestParameters: GetOrganisationTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserTokenResponse> {
        const response = await this.getOrganisationTokensIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all users.
     */
    private async getOrganisationUsersRaw(requestParameters: GetOrganisationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationUserResponse>> {
        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.itemsPerPage !== undefined) {
            queryParameters['ItemsPerPage'] = requestParameters.itemsPerPage;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationUserResponseFromJSON(jsonValue));
    }

    /**
     * Get all users.
     */
    async getOrganisationUsers(requestParameters: GetOrganisationUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationUserResponse> {
        const response = await this.getOrganisationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get specidfied user.
     */
    private async getOrganisationUsersIdRaw(requestParameters: GetOrganisationUsersIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationUserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganisationUsersId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationUserResponseFromJSON(jsonValue));
    }

    /**
     * Get specidfied user.
     */
    async getOrganisationUsersId(requestParameters: GetOrganisationUsersIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationUserResponse> {
        const response = await this.getOrganisationUsersIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted
     * Update your Fingoti organisation.
     */
    private async patchOrganisationRaw(requestParameters: PatchOrganisationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchOrganisationRequestToJSON(requestParameters.patchOrganisationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted
     * Update your Fingoti organisation.
     */
    async patchOrganisation(requestParameters: PatchOrganisationOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted
     * Update organisation address.
     */
    private async patchOrganisationAddressesIdRaw(requestParameters: PatchOrganisationAddressesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchOrganisationAddressesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/addresses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchAddressRequestToJSON(requestParameters.patchAddressRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted
     * Update organisation address.
     */
    async patchOrganisationAddressesId(requestParameters: PatchOrganisationAddressesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchOrganisationAddressesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted.
     * Update organisation preset.
     */
    private async patchOrganisationPresetsIdRaw(requestParameters: PatchOrganisationPresetsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchOrganisationPresetsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/presets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchPresetRequestToJSON(requestParameters.patchPresetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted.
     * Update organisation preset.
     */
    async patchOrganisationPresetsId(requestParameters: PatchOrganisationPresetsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchOrganisationPresetsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted. 0 = None, 1 = Read, 2 = Write
     * Update organisation role.
     */
    private async patchOrganisationRolesIdRaw(requestParameters: PatchOrganisationRolesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchOrganisationRolesId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchRoleRequestToJSON(requestParameters.patchRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted. 0 = None, 1 = Read, 2 = Write
     * Update organisation role.
     */
    async patchOrganisationRolesId(requestParameters: PatchOrganisationRolesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchOrganisationRolesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
     * Update API token.
     */
    private async patchOrganisationTokensIdRaw(requestParameters: PatchOrganisationTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchOrganisationTokensId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchOrganisationTokenRequestToJSON(requestParameters.patchOrganisationTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
     * Update API token.
     */
    async patchOrganisationTokensId(requestParameters: PatchOrganisationTokensIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchOrganisationTokensIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organisation user.
     */
    private async patchOrganisationUsersIdRaw(requestParameters: PatchOrganisationUsersIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchOrganisationUsersId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRoleToJSON(requestParameters.updateUserRole),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Update organisation user.
     */
    async patchOrganisationUsersId(requestParameters: PatchOrganisationUsersIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.patchOrganisationUsersIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new Fingoti organisation.
     */
    private async postOrganisationRaw(requestParameters: PostOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegiserOrganisationDtoToJSON(requestParameters.regiserOrganisationDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Register a new Fingoti organisation.
     */
    async postOrganisation(requestParameters: PostOrganisationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.postOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new address.
     */
    private async postOrganisationAddressesRaw(requestParameters: PostOrganisationAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/addresses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAddressRequestToJSON(requestParameters.addAddressRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Create a new address.
     */
    async postOrganisationAddresses(requestParameters: PostOrganisationAddressesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.postOrganisationAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new preset.
     */
    private async postOrganisationPresetsRaw(requestParameters: PostOrganisationPresetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPresetResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/presets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPresetRequestToJSON(requestParameters.addPresetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPresetResultFromJSON(jsonValue));
    }

    /**
     * Create a new preset.
     */
    async postOrganisationPresets(requestParameters: PostOrganisationPresetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPresetResult> {
        const response = await this.postOrganisationPresetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 0 = None, 1 = Read, 2 = Write
     * Create a new role.
     */
    private async postOrganisationRolesRaw(requestParameters: PostOrganisationRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultWithId>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRoleRequestToJSON(requestParameters.addRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultWithIdFromJSON(jsonValue));
    }

    /**
     * 0 = None, 1 = Read, 2 = Write
     * Create a new role.
     */
    async postOrganisationRoles(requestParameters: PostOrganisationRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultWithId> {
        const response = await this.postOrganisationRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new tenant. This is only available to partner organisations.
     */
    private async postOrganisationTenantsRaw(requestParameters: PostOrganisationTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterOrganisationResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegiserTenantDtoToJSON(requestParameters.regiserTenantDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterOrganisationResultFromJSON(jsonValue));
    }

    /**
     * Create new tenant. This is only available to partner organisations.
     */
    async postOrganisationTenants(requestParameters: PostOrganisationTenantsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterOrganisationResult> {
        const response = await this.postOrganisationTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate new API token.
     */
    private async postOrganisationTokensRaw(requestParameters: PostOrganisationTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenSuccessResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewOrganisationTokenDtoToJSON(requestParameters.newOrganisationTokenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Generate new API token.
     */
    async postOrganisationTokens(requestParameters: PostOrganisationTokensRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenSuccessResponse> {
        const response = await this.postOrganisationTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invite a new user to the organisation.
     */
    private async postOrganisationUsersRaw(requestParameters: PostOrganisationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.apiKey("Authorization")}`; // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/organisation/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteUserDtoToJSON(requestParameters.inviteUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultFromJSON(jsonValue));
    }

    /**
     * Invite a new user to the organisation.
     */
    async postOrganisationUsers(requestParameters: PostOrganisationUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default> {
        const response = await this.postOrganisationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
